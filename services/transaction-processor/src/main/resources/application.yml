spring:
  application:
    name: ${APP_NAME:service}
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:validate}
    open-in-view: false
  flyway:
    enabled: ${SPRING_FLYWAY_ENABLED:true}
    locations: ${SPRING_FLYWAY_LOCATIONS:classpath:db/migration}
    baseline-on-migrate: true
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:redpanda:9092}
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:pf-consumer}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.use.type.headers: false
    listener:
      ack-mode: RECORD

server:
  port: ${SERVER_PORT:8080}

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      probes:
        enabled: true
  server:
    port: ${MANAGEMENT_PORT:${SERVER_PORT}}   # keep health on same port for docker healthchecks

logging:
  level:
    root: INFO
    org.flywaydb: DEBUG

tradestream:
  topics:
    tradeExecuted: ${KAFKA_TOPIC_TRADE_EXECUTED:trade.executed.v1}

market:
  baseUrl: ${MARKET_SERVICE_URL:http://market-data-consumer:8083}

info:
  app: transaction-processor