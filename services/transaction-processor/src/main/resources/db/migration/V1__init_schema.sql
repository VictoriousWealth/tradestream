-- ===========================
-- V1__init_schema.sql
-- Transaction Processor (journal) schema
-- ===========================

-- 1) Idempotency: track processed Kafka messages so replays/duplicates are safe
CREATE TABLE IF NOT EXISTS processed_messages (
    topic         TEXT        NOT NULL,
    message_id    TEXT        NOT NULL,          -- use tradeId (or another stable id)
    processed_at  TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (topic, message_id)
);

-- 2) Append-only per-user transaction ledger
--    We write one row for the buyer and one row for the seller per trade.
CREATE TABLE IF NOT EXISTS transactions (
    id           UUID            PRIMARY KEY,    -- synthetic PK (generated by app)
    trade_id     UUID            NOT NULL,       -- from event
    order_id     UUID            NOT NULL,       -- buyOrderId or sellOrderId
    user_id      UUID            NOT NULL,       -- resolved via Orders service
    side         VARCHAR(4)      NOT NULL CHECK (side IN ('BUY','SELL')),
    ticker       VARCHAR(32)     NOT NULL,
    quantity     INT             NOT NULL CHECK (quantity > 0),
    price        DECIMAL(18,6)   NOT NULL CHECK (price > 0),
    executed_at  TIMESTAMPTZ     NOT NULL,

    -- Ensure we only ever store one row per (trade, participant, side)
    CONSTRAINT uq_trade_participant UNIQUE (trade_id, user_id, side)
);

-- Helpful indexes for common queries
CREATE INDEX IF NOT EXISTS idx_tx_user_time    ON transactions (user_id, executed_at DESC);
CREATE INDEX IF NOT EXISTS idx_tx_user_ticker  ON transactions (user_id, ticker, executed_at DESC);
CREATE INDEX IF NOT EXISTS idx_tx_trade_id     ON transactions (trade_id);
