spring:
  application:
    name: portfolio-service

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/portfoliodb}
    username: ${SPRING_DATASOURCE_USERNAME:portfoliouser}
    password: ${SPRING_DATASOURCE_PASSWORD:portfoliopass}

  jpa:
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:validate}
    open-in-view: false
    properties:
      hibernate.jdbc.time_zone: UTC

  flyway:
    enabled: ${SPRING_FLYWAY_ENABLED:true}
    locations: ${SPRING_FLYWAY_LOCATIONS:classpath:db/migration}

  cache:
    type: ${SPRING_CACHE_TYPE:none}

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:portfolio-svc}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.use.type.headers: false
        spring.json.value.default.type: com.tradestream.portfolio_service.consumer.TransactionRecordedEvent
    listener:
      ack-mode: RECORD

server:
  port: ${SERVER_PORT:8087}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      probes:
        enabled: true

tradestream:
  topics:
    tradeExecuted: ${KAFKA_TOPIC_TRADE_EXECUTED:trade.executed.v1}
    transactionRecorded: ${KAFKA_TOPIC_TRANSACTION_RECORDED:transaction.recorded.v1}

logging:
  level:
    root: INFO
    org.apache.kafka.clients.consumer: WARN
    org.springframework.kafka.listener: INFO
